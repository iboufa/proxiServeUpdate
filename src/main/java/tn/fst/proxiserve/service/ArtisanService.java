package tn.fst.proxiserve.service;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.geo.Distance;
import org.springframework.data.geo.Metrics;
import org.springframework.data.geo.Point;
import org.springframework.stereotype.Service;

import tn.fst.proxiserve.model.Artisan;
import tn.fst.proxiserve.model.Review;
import tn.fst.proxiserve.repository.ArtisanRepository;
import tn.fst.proxiserve.repository.ReviewRepository;

/**
 * Service pour la gestion des artisans, notamment la recherche g√©ographique.
 */
@Service
public class ArtisanService {

    private static final Logger logger = LoggerFactory.getLogger(ArtisanService.class);
    private final ArtisanRepository artisanRepository;

    /**
     * Constructeur avec injection de d√©pendances.
     * @param artisanRepository R√©f√©rentiel des artisans.
     */
    @Autowired
    private ReviewRepository reviewRepository;

    public ArtisanService(ArtisanRepository artisanRepository, ReviewRepository reviewRepository) {
        this.artisanRepository = artisanRepository;
        this.reviewRepository = reviewRepository;
    }
    
    /**
     * Recherche des artisans √† proximit√© d'une localisation donn√©e.
     * @param latitude  Latitude du point de r√©f√©rence.
     * @param longitude Longitude du point de r√©f√©rence.
     * @param radiusInKm Rayon de recherche en kilom√®tres.
     * @return Liste des artisans trouv√©s dans la zone sp√©cifi√©e.
     * @throws IllegalArgumentException si les param√®tres sont invalides.
     */
    public List<Artisan> findNearbyArtisans(double latitude, double longitude, double radiusInKm) {
        // V√©rification des valeurs d'entr√©e
        if (latitude < -90 || latitude > 90 || longitude < -180 || longitude > 180) {
            logger.error(" Coordonn√©es invalides : latitude={}, longitude={}", latitude, longitude);
            throw new IllegalArgumentException("Les coordonn√©es GPS fournies sont invalides.");
        }

        if (radiusInKm <= 0) {
            logger.error(" Rayon de recherche invalide : {}", radiusInKm);
            throw new IllegalArgumentException("Le rayon de recherche doit √™tre un nombre positif.");
        }

        Point location = new Point(longitude, latitude);
        Distance distance = new Distance(radiusInKm, Metrics.KILOMETERS);

        logger.info("üîç Recherche des artisans proches de [{}, {}] dans un rayon de {} km", latitude, longitude, radiusInKm);
        logger.debug("üì° Param√®tres de recherche : Point({}, {}), Distance = {} km", longitude, latitude, radiusInKm);

        List<Artisan> artisans = artisanRepository.findByLocationNear(location, distance);

        if (artisans.isEmpty()) {
            logger.warn(" Aucun artisan trouv√© √† proximit√© de [{}, {}] dans un rayon de {} km", latitude, longitude, radiusInKm);
        } else {
            logger.info(" {} artisans trouv√©s √† proximit√© de [{}, {}]", artisans.size(), latitude, longitude);
        }

        return artisans;
    }



    

    

    public double calculateAverageRating(String artisanId) {
        List<Review> reviews = reviewRepository.findByArtisanId(artisanId);
        double avg = reviews.stream().mapToInt(Review::getRating).average().orElse(0.0);
        logger.debug(" Note moyenne calcul√©e pour artisan {} : {} ({} avis)", artisanId, avg, reviews.size());
        return avg;
    }
    
    

}
